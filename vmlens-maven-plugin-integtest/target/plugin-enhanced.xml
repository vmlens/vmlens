<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.11 (enhanced XHTML version (used for plugin:report))-->

<plugin>
  <name>vmlens-maven-plugin-integtest</name>
  <description>parent pom</description>
  <groupId>com.vmlens</groupId>
  <artifactId>vmlens-maven-plugin-integtest</artifactId>
  <version>1.2.6-SNAPSHOT</version>
  <goalPrefix>vmlens-maven-plugin-integtest</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <requiredJavaVersion>1.8</requiredJavaVersion>
  <requiredMavenVersion>2.0</requiredMavenVersion>
  <mojos>
    <mojo>
      <goal>help</goal>
      <description>Display help information on vmlens-maven-plugin-integtest.
&lt;br /&gt;
 Call &lt;code&gt;mvn vmlens-maven-plugin-integtest:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.vmlens.vmlens_maven_plugin_integtest.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>test</goal>
      <requiresDependencyResolution>test</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>test</phase>
      <implementation>com.vmlens.IntTestMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>additionalClasspathDependencies</name>
          <type>java.util.List&lt;org.apache.maven.model.Dependency&gt;</type>
          <since>3.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional Maven dependencies to be added to the test classpath at runtime. Each element supports the parametrization like documented in &lt;a href=&quot;https://maven.apache.org/pom.html#dependencies&quot;&gt;POM Reference: Dependencies&lt;/a&gt;. 
&lt;p&gt;Those dependencies are automatically collected (i.e. have their full dependency tree calculated) and then all underlying artifacts are resolved from the repository (including their transitive dependencies). Afterwards the resolved artifacts are filtered to only contain &lt;code&gt;compile&lt;/code&gt; and &lt;code&gt;runtime&lt;/code&gt; scoped ones and appended to the test classpath at runtime (after the ones from &lt;code&gt;additionalClasspathElements&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt;).&lt;/p&gt;
&lt;p&gt;The following differences to regular project dependency resolving apply:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;The dependency management from the project is not taken into account.&lt;/li&gt;
 &lt;li&gt;Conflicts between the different items and the project dependencies are not resolved.&lt;/li&gt;
 &lt;li&gt;Only external dependencies (outside the current Maven reactor) are supported.&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>additionalClasspathElements</name>
          <type>java.lang.String[]</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional elements to be appended to the test classpath at runtime. Each element must be a file system path to a JAR file or a directory containing classes. No wildcards are allowed here.</description>
        </parameter>
        <parameter>
          <name>agentDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Agent directory</description>
        </parameter>
        <parameter>
          <name>argLine</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Arbitrary JVM options to set on the command line. Only effective for forked executions. 
&lt;br /&gt;
&lt;br /&gt;
 Since the Version 2.17 using an alternate syntax for &lt;code&gt;argLine&lt;/code&gt;, &lt;b&gt;@{...}&lt;/b&gt; allows late replacement of properties when the plugin is executed, so properties that have been modified by other plugins will be picked up correctly. See the Frequently Asked Questions page with more details:
&lt;br /&gt;&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&quot;&gt; http://maven.apache.org/surefire/maven-surefire-plugin/faq.html&lt;/a&gt;
&lt;br /&gt;&lt;a href=&quot;http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&quot;&gt; http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html&lt;/a&gt;&lt;br /&gt;&lt;strong&gt;See also:&lt;/strong&gt; forkCount&lt;!-- no javadoc sites associated --&gt;</description>
        </parameter>
        <parameter>
          <name>basedir</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>false</editable>
          <description>The base directory of the project being tested. This can be obtained in your integration test via System.getProperty(&quot;basedir&quot;).</description>
        </parameter>
        <parameter>
          <name>childDelegation</name>
          <type>boolean</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>When false it makes tests run using the standard classloader delegation instead of the default Maven isolated classloader. Only used when forking (&lt;code&gt;forkCount&lt;/code&gt; is greater than zero).
&lt;br /&gt;
 Setting it to false helps with some problems caused by conflicts between xml parsers in the classpath and the Java 5 provider parser.</description>
        </parameter>
        <parameter>
          <name>classesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated classes of the project being tested. This will be included after the test classes in the test classpath.</description>
        </parameter>
        <parameter>
          <name>classpathDependencyExcludes</name>
          <type>java.lang.String[]</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to exclude from the test classpath at runtime. Each item is passed as pattern to &lt;code&gt;org.apache.maven.shared.artifact.filter.PatternIncludesArtifactFilter&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt;. The pattern is matched against the following artifact ids: 
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;groupId:artifactId&lt;/code&gt; (Short ID)&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;groupId:artifactId:type:classifier&lt;/code&gt; (Dependency Conflict ID)&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;groupId:artifactId:type:classifier:version&lt;/code&gt; (Full ID)&lt;/li&gt;
&lt;/ul&gt; The matching algorithm is described in detail in &lt;a href=&quot;https://maven.apache.org/plugins/maven-assembly-plugin/advanced-descriptor-topics.html#advanced-artifact-matching-in-includes-and-excludes&quot;&gt;Advanced Artifact-Matching&lt;/a&gt; for the maven-assembly-plugin. This parameter behaves the same as the &lt;code&gt;excludes&lt;/code&gt; pattern described there. The dependency matching is applied to the project dependency IDs (including transitive ones) &lt;i&gt;after resolving&lt;/i&gt;, i.e. excluding one dependency will not exclude its transitive dependencies!</description>
        </parameter>
        <parameter>
          <name>classpathDependencyScopeExclude</name>
          <type>java.lang.String</type>
          <since>2.6</since>
          <required>false</required>
          <editable>true</editable>
          <description>A dependency scope to exclude from the test classpath at runtime. The scope should be one of the scopes defined by org.apache.maven.artifact.Artifact. This includes the following: 
&lt;br /&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;i&gt;compile&lt;/i&gt; - system, provided, compile&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;runtime&lt;/i&gt; - compile, runtime&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;compile+runtime&lt;/i&gt; - system, provided, compile, runtime&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;runtime+system&lt;/i&gt; - system, compile, runtime&lt;/li&gt;
 &lt;li&gt;&lt;i&gt;test&lt;/i&gt; - system, provided, compile, runtime, test&lt;/li&gt;
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>consoleOutputReporter</name>
          <type>org.apache.maven.plugin.surefire.extensions.SurefireConsoleOutputReporter</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>debugForkedProcess</name>
          <type>java.lang.String</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Attach a debugger to the forked JVM. If set to &quot;true&quot;, the process will suspend and wait for a debugger to attach on port 5005. If set to some other string, that string will be appended to the argLine, allowing you to configure arbitrary debuggability options (without overwriting the other options specified through the &lt;code&gt;argLine&lt;/code&gt; parameter).</description>
        </parameter>
        <parameter>
          <name>dependenciesToScan</name>
          <type>java.lang.String[]</type>
          <since>2.15</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of dependencies to scan for test classes to include in the test run. The child elements of this element must be &amp;lt;dependency&amp;gt; elements, and the contents of each of these elements must be a string which follows the general form: 
&lt;p&gt;&lt;code&gt;groupId[:artifactId[:type[:classifier][:version]]]&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;The wildcard character &lt;code&gt;*&lt;/code&gt; can be used within the sub parts of those composite identifiers to do glob-like pattern matching. The classifier may be omitted when matching dependencies without a classifier.&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;group&lt;/code&gt; or, equivalently, &lt;code&gt;group:*&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;g*p:*rtifac*&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;group:*:jar&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;group:artifact:*:1.0.0&lt;/code&gt; (no classifier)&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;group:*:test-jar:tests&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;*:artifact:*:*:1.0.0&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Since version 2.22.0 you can scan for test classes from a project dependency of your multi-module project.&lt;/p&gt;
&lt;p&gt;In versions before 3.0.0-M4, only &lt;code&gt;groupId:artifactId&lt;/code&gt; is supported.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableXmlReport</name>
          <type>java.lang.Boolean</type>
          <since>2.2</since>
          <deprecated>Instead use &lt;em&gt;disable&lt;/em&gt; within &lt;code&gt;statelessTestsetReporter&lt;/code&gt; since of 3.0.0-M6.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>Flag to disable the generation of report files in xml format. Deprecated since 3.0.0-M4.</description>
        </parameter>
        <parameter>
          <name>enableAssertions</name>
          <type>boolean</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire enables JVM assertions for the execution of your test cases. To disable the assertions, set this flag to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>enableOutErrElements</name>
          <type>boolean</type>
          <since>3.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag for including/excluding &lt;code&gt;&amp;lt;system-out /&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;system-err /&amp;gt;&lt;/code&gt; elements for successfully passed tests in XML reports. Note that the default value may change to &lt;code&gt;false&lt;/code&gt; is a future version.</description>
        </parameter>
        <parameter>
          <name>enableProcessChecker</name>
          <type>java.lang.String</type>
          <since>3.0.0-M4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Since 3.0.0-M4 the process checkers are disabled. You can enable them namely by setting &lt;code&gt;ping&lt;/code&gt; and &lt;code&gt;native&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt; in this parameter. 
&lt;br /&gt;
 The checker is useful in situations when you kill the build on a CI system and you want the Surefire forked JVM to kill the tests asap and free all handlers on the file system been previously used by the JVM and by the tests. 
&lt;br /&gt;
 The &lt;code&gt;ping&lt;/code&gt; should be safely used together with ZGC or Shenandoah Garbage Collector. Due to the &lt;code&gt;ping&lt;/code&gt; relies on timing of the PING (triggered every 30 seconds), slow GCs may pause the timers and pretend that the parent process of the forked JVM does not exist. 
&lt;br /&gt;
 The &lt;code&gt;native&lt;/code&gt; is very fast checker. It is useful mechanism on Unix based systems, Linux distributions and Alpine/BusyBox Linux. See the JIRA &lt;a href=&quot;https://issues.apache.org/jira/browse/SUREFIRE-1631&quot;&gt;SUREFIRE-1631&lt;/a&gt; for Windows issues. 
&lt;br /&gt;
 Another useful configuration parameter is &lt;code&gt;forkedProcessTimeoutInSeconds&lt;/code&gt;. 
&lt;br /&gt;
 See the Frequently Asked Questions page with more details:
&lt;br /&gt;&lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#kill-jvm&quot;&gt; http://maven.apache.org/surefire/maven-surefire-plugin/faq.html#kill-jvm&lt;/a&gt;
&lt;br /&gt;&lt;a href=&quot;http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html#kill-jvm&quot;&gt; http://maven.apache.org/surefire/maven-failsafe-plugin/faq.html#kill-jvm&lt;/a&gt;
&lt;br /&gt;
 Example of use: 
&lt;br /&gt;&lt;i&gt;mvn test -Dsurefire.enableProcessChecker=all&lt;/i&gt;</description>
        </parameter>
        <parameter>
          <name>enablePropertiesElement</name>
          <type>boolean</type>
          <since>3.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Flag for including/excluding &lt;code&gt;&amp;lt;properties /&amp;gt;&lt;/code&gt; element for successfully passed tests in XML reports.</description>
        </parameter>
        <parameter>
          <name>encoding</name>
          <type>java.lang.String</type>
          <since>3.0.0-M1</since>
          <required>false</required>
          <editable>true</editable>
          <description>The character encoding scheme to be applied while generating test report files (see target/surefire-reports/yourTestName.txt). The report output files (*-out.txt) are encoded in UTF-8 if not set otherwise.</description>
        </parameter>
        <parameter>
          <name>environmentVariables</name>
          <type>java.util.Map&lt;java.lang.String, java.lang.String&gt;</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Additional environment variables to set on the command line.</description>
        </parameter>
        <parameter>
          <name>eventDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>excludeJUnit5Engines</name>
          <type>java.lang.String[]</type>
          <since>3.0.0-M6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide the ID/s of an JUnit engine to be excluded in the test run.</description>
        </parameter>
        <parameter>
          <name>excludedEnvironmentVariables</name>
          <type>java.lang.String[]</type>
          <since>3.0.0-M4</since>
          <required>false</required>
          <editable>true</editable>
          <description>You can selectively exclude individual environment variables by enumerating their keys. 
&lt;br /&gt;
 The environment is a system-dependent mapping from keys to values which is inherited from the Maven process to the forked Surefire processes. The keys must literally (case sensitive) match in order to exclude their environment variable. 
&lt;br /&gt;
 Example to exclude three environment variables: 
&lt;br /&gt;&lt;i&gt;mvn test -Dsurefire.excludedEnvironmentVariables=ACME1,ACME2,ACME3&lt;/i&gt;</description>
        </parameter>
        <parameter>
          <name>excludedGroups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only and JUnit5+ provider since 2.22.0) Excluded groups/categories/tags. Any methods/classes/etc with one of the groups/categories/tags specified in this list will specifically not be run.
&lt;br /&gt;
 For JUnit4, this parameter forces the use of the 4.7 provider. For JUnit5, this parameter forces the use of the JUnit platform provider.
&lt;br /&gt;
 This parameter is ignored if the &lt;code&gt;suiteXmlFiles&lt;/code&gt; parameter is specified.
&lt;br /&gt;
 Since version 2.18.1 and JUnit 4.12, the &lt;code&gt;@Category&lt;/code&gt; annotation type is automatically inherited from superclasses, see &lt;code&gt;@java.lang.annotation.Inherited&lt;/code&gt;. Make sure that test class inheritance still makes sense together with &lt;code&gt;@Category&lt;/code&gt; annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>excludes</name>
          <type>java.util.List&lt;java.lang.String&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;exclude&amp;gt; elements specifying the tests (by pattern) that should be excluded in testing. When not specified and when the &lt;code&gt;test&lt;/code&gt; parameter is not specified, the default excludes will be 
&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;
&amp;lt;excludes&amp;gt;
    &amp;lt;exclude&amp;gt;**/*$*&amp;lt;/exclude&amp;gt;
&amp;lt;/excludes&amp;gt;
&lt;/code&gt;&lt;/pre&gt; (which excludes all inner classes). 
&lt;br /&gt;
 This parameter is ignored if the TestNG &lt;code&gt;suiteXmlFiles&lt;/code&gt; parameter is specified. 
&lt;br /&gt;
 Each exclude item may also contain a comma-separated sub-list of items, which will be treated as multiple &amp;lt;exclude&amp;gt; entries.
&lt;br /&gt;
 Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG): 
&lt;pre&gt;&lt;code&gt;
&amp;lt;exclude&amp;gt;%regex[pkg.*Slow.*.class], Unstable*&amp;lt;/exclude&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter &lt;code&gt;testClassesDirectory&lt;/code&gt; which defaults to the POM property &lt;code&gt;${project.build.testOutputDirectory}&lt;/code&gt;, typically &lt;code&gt;src/test/java&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>excludesFile</name>
          <type>java.io.File</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing exclude patterns. Blank lines, or lines starting with # are ignored. If &lt;code&gt;excludes&lt;/code&gt; are also specified, these patterns are appended. Example with path, simple and regex excludes:
&lt;br /&gt;
&lt;pre&gt;&lt;code&gt;
*/test/*
**/DontRunTest.*
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt; Since 3.0.0-M6, method filtering support is provided in the exclusions file as well, example: 
&lt;pre&gt;&lt;code&gt;
pkg.SomeTest#testMethod
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>failIfNoSpecifiedTests</name>
          <type>boolean</type>
          <since>2.12</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if none of the tests specified in -Dtest=... are run. Defaults to &quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>failIfNoTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to cause a failure if there are no tests to run. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>failOnFlakeCount</name>
          <type>int</type>
          <since>3.0.0-M6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to a value greater than 0 to fail the whole test set if the cumulative number of flakes reaches this threshold. Set to 0 to allow an unlimited number of flakes.</description>
        </parameter>
        <parameter>
          <name>forkCount</name>
          <type>java.lang.String</type>
          <since>2.14</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the number of VMs to fork in parallel in order to execute the tests. When terminated with &quot;C&quot;, the number part is multiplied with the number of CPU cores. Floating point value are only accepted together with &quot;C&quot;. If set to &quot;0&quot;, no VM is forked and all tests are executed within the main process.
&lt;br /&gt;
&lt;br /&gt;
 Example values: &quot;1.5C&quot;, &quot;4&quot;
&lt;br /&gt;
&lt;br /&gt;
 The system properties and the &lt;code&gt;argLine&lt;/code&gt; of the forked processes may contain the place holder string &lt;code&gt;${surefire.forkNumber}&lt;/code&gt;, which is replaced with a fixed number for each of the parallel forks, ranging from &lt;b&gt;1&lt;/b&gt; to the effective value of &lt;code&gt;forkCount&lt;/code&gt; times the maximum number of parallel Surefire executions in maven parallel builds, i.e. the effective value of the &lt;b&gt;-T&lt;/b&gt; command line argument of maven core.</description>
        </parameter>
        <parameter>
          <name>forkNode</name>
          <type>org.apache.maven.surefire.extensions.ForkNodeFactory</type>
          <since>3.0.0-M5</since>
          <required>false</required>
          <editable>true</editable>
          <description>This parameter configures the forked node. Currently, you can select the communication protocol, i.e. process pipes or TCP/IP sockets. The plugin uses process pipes by default which will be turned to TCP/IP in the version 3.0.0. Alternatively, you can implement your own factory and SPI. 
&lt;br /&gt;
 See the documentation for more details:
&lt;br /&gt;&lt;a href=&quot;https://maven.apache.org/plugins/maven-surefire-plugin/examples/process-communication.html&quot;&gt; https://maven.apache.org/plugins/maven-surefire-plugin/examples/process-communication.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>forkedProcessExitTimeoutInSeconds</name>
          <type>int</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Forked process is normally terminated without any significant delay after given tests have completed. If the particular tests started non-daemon Thread(s), the process hangs instead of been properly terminated by &lt;code&gt;System.exit()&lt;/code&gt;. Use this parameter in order to determine the timeout of terminating the process. &lt;a href=&quot;http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&quot;&gt;see the documentation: http://maven.apache.org/surefire/maven-surefire-plugin/examples/shutdown.html&lt;/a&gt; Turns to default fallback value of 30 seconds if negative integer.</description>
        </parameter>
        <parameter>
          <name>forkedProcessTimeoutInSeconds</name>
          <type>int</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Kill the forked test process after a certain number of seconds. If set to 0, wait forever for the process, never timing out.</description>
        </parameter>
        <parameter>
          <name>groups</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit47 provider with JUnit4.8+ only and JUnit5+ provider since 2.22.0) Groups/categories/tags for this test. Only classes/methods/etc decorated with one of the groups/categories/tags specified here will be included in test run, if specified.
&lt;br /&gt;
 For JUnit4 tests, this parameter forces the use of the 4.7 provider. For JUnit5 tests, this parameter forces the use of the JUnit platform provider.
&lt;br /&gt;
 This parameter is ignored if the &lt;code&gt;suiteXmlFiles&lt;/code&gt; parameter is specified.
&lt;br /&gt;
 Since version 2.18.1 and JUnit 4.12, the &lt;code&gt;@Category&lt;/code&gt; annotation type is automatically inherited from superclasses, see &lt;code&gt;@java.lang.annotation.Inherited&lt;/code&gt;. Make sure that test class inheritance still makes sense together with &lt;code&gt;@Category&lt;/code&gt; annotation of the JUnit 4.12 or higher appeared in superclass.</description>
        </parameter>
        <parameter>
          <name>includeJUnit5Engines</name>
          <type>java.lang.String[]</type>
          <since>3.0.0-M6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Provide the ID/s of an JUnit engine to be included in the test run.</description>
        </parameter>
        <parameter>
          <name>includes</name>
          <type>java.util.List&lt;java.lang.String&gt;</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of &amp;lt;include&amp;gt; elements specifying the tests (by pattern) that should be included in testing. When not specified and when the &lt;code&gt;test&lt;/code&gt; parameter is not specified, the default includes will be 
&lt;pre&gt;&lt;code&gt;
&amp;lt;includes&amp;gt;
    &amp;lt;include&amp;gt;**/Test*.java&amp;lt;/include&amp;gt;
    &amp;lt;include&amp;gt;**/*Test.java&amp;lt;/include&amp;gt;
    &amp;lt;include&amp;gt;**/*Tests.java&amp;lt;/include&amp;gt;
    &amp;lt;include&amp;gt;**/*TestCase.java&amp;lt;/include&amp;gt;
&amp;lt;/includes&amp;gt;
&lt;/code&gt;&lt;/pre&gt; Each include item may also contain a comma-separated sub-list of items, which will be treated as multiple &amp;lt;include&amp;gt; entries.
&lt;br /&gt;
 Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG): 
&lt;pre&gt;&lt;code&gt;
&amp;lt;include&amp;gt;%regex[.*[Cat|Dog].*], Basic????, !Unstable*&amp;lt;/include&amp;gt;
&amp;lt;include&amp;gt;%regex[.*[Cat|Dog].*], !%regex[pkg.*Slow.*.class], pkg/**/*Fast*.java&amp;lt;/include&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
 This parameter is ignored if the TestNG &lt;code&gt;suiteXmlFiles&lt;/code&gt; parameter is specified.
&lt;br /&gt;
&lt;br /&gt;&lt;b&gt;Notice that&lt;/b&gt; these values are relative to the directory containing generated test classes of the project being tested. This directory is declared by the parameter &lt;code&gt;testClassesDirectory&lt;/code&gt; which defaults to the POM property &lt;code&gt;${project.build.testOutputDirectory&lt;/code&gt;}, typically &lt;code&gt;src/test/java&lt;/code&gt; unless overridden.</description>
        </parameter>
        <parameter>
          <name>includesFile</name>
          <type>java.io.File</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>A file containing include patterns. Blank lines, or lines starting with # are ignored. If &lt;code&gt;includes&lt;/code&gt; are also specified, these patterns are appended. Example with path, simple and regex includes: 
&lt;pre&gt;&lt;code&gt;
*/test/*
**/NotIncludedByDefault.java
%regex[.*Test.*|.*Not.*]
&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
 Since 3.0.0-M6, method filtering support is provided in the inclusions file as well, example: 
&lt;pre&gt;&lt;code&gt;
pkg.SomeTest#testMethod
&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jdkToolchain</name>
          <type>java.util.Map&lt;java.lang.String, java.lang.String&gt;</type>
          <since>3.0.0-M5 and Maven 3.3.x</since>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Allow for configuration of the test jvm via maven toolchains. This permits a configuration where the project is built with one jvm and tested with another. This is similar to &lt;code&gt;jvm&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt;, but avoids hardcoding paths. The two parameters are mutually exclusive (jvm wins)&lt;/p&gt;
&lt;p&gt;Examples:&lt;/p&gt; (see &lt;a href=&quot;https://maven.apache.org/guides/mini/guide-using-toolchains.html&quot;&gt; Guide to Toolchains&lt;/a&gt; for more info) 
&lt;pre&gt;&lt;code&gt;   &amp;lt;configuration&amp;gt;
       ...
       &amp;lt;jdkToolchain&amp;gt;
           &amp;lt;version&amp;gt;1.11&amp;lt;/version&amp;gt;
       &amp;lt;/jdkToolchain&amp;gt;
   &amp;lt;/configuration&amp;gt;

   &amp;lt;configuration&amp;gt;
       ...
       &amp;lt;jdkToolchain&amp;gt;
           &amp;lt;version&amp;gt;1.8&amp;lt;/version&amp;gt;
           &amp;lt;vendor&amp;gt;zulu&amp;lt;/vendor&amp;gt;
       &amp;lt;/jdkToolchain&amp;gt;
   &amp;lt;/configuration&amp;gt;
   &lt;/code&gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>junitArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the JUnit artifact. If not set, &lt;code&gt;junit:junit&lt;/code&gt; will be used.</description>
        </parameter>
        <parameter>
          <name>jvm</name>
          <type>java.lang.String</type>
          <since>2.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to specify the jvm (or path to the java executable) to use with the forking options. For the default, the jvm will be a new instance of the same VM as the one used to run Maven. JVM settings are not inherited from MAVEN_OPTS.</description>
        </parameter>
        <parameter>
          <name>objectFactory</name>
          <type>java.lang.String</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG only) Define the factory class used to create all test instances.</description>
        </parameter>
        <parameter>
          <name>parallel</name>
          <type>java.lang.String</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG provider) When you use the parameter &lt;code&gt;parallel&lt;/code&gt;, TestNG will try to run all your test methods in separate threads, except for methods that depend on each other, which will be run in the same thread in order to respect their order of execution. Supports two values: &lt;code&gt;classes&lt;/code&gt; or &lt;code&gt;methods&lt;/code&gt;. 
&lt;br /&gt;
 (JUnit 4.7 provider) Supports values &lt;code&gt;classes&lt;/code&gt;, &lt;code&gt;methods&lt;/code&gt;, &lt;code&gt;both&lt;/code&gt; to run in separate threads been controlled by &lt;code&gt;threadCount&lt;/code&gt;. 
&lt;br /&gt;
&lt;br /&gt;
 Since version 2.16 (JUnit 4.7 provider), the value &lt;code&gt;both&lt;/code&gt; is &lt;strong&gt;DEPRECATED&lt;/strong&gt;. Use &lt;code&gt;classesAndMethods&lt;/code&gt; instead. 
&lt;br /&gt;
&lt;br /&gt;
 Since version 2.16 (JUnit 4.7 provider), additional vales are available: 
&lt;br /&gt;&lt;code&gt;suites&lt;/code&gt;, &lt;code&gt;suitesAndClasses&lt;/code&gt;, &lt;code&gt;suitesAndMethods&lt;/code&gt;, &lt;code&gt;classesAndMethods&lt;/code&gt;, &lt;code&gt;all&lt;/code&gt;. 
&lt;br /&gt;
 By default, Surefire does not execute tests in parallel. You can set the parameter &lt;code&gt;parallel&lt;/code&gt; to &lt;code&gt;none&lt;/code&gt; to explicitly disable parallel execution (e.g. when disabling parallel execution in special Maven profiles when executing coverage analysis).</description>
        </parameter>
        <parameter>
          <name>parallelMavenExecution</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>Parallel Maven Execution.</description>
        </parameter>
        <parameter>
          <name>parallelOptimized</name>
          <type>boolean</type>
          <since>2.17</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 / provider only) The thread counts do not exceed the number of parallel suite, class runners and average number of methods per class if set to &lt;strong&gt;true&lt;/strong&gt;. 
&lt;br /&gt;
 True by default.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutForcedInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests and &lt;code&gt;interrupt&lt;/code&gt; currently running tests after a certain number of seconds. 
&lt;br /&gt;
 Example values: &quot;3.5&quot;, &quot;4&quot;
&lt;br /&gt;
&lt;br /&gt;
 If set to 0, wait forever, never timing out. Makes sense with specified &lt;code&gt;parallel&lt;/code&gt; different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>parallelTestsTimeoutInSeconds</name>
          <type>double</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>Stop executing queued parallel JUnit tests after a certain number of seconds. 
&lt;br /&gt;
 Example values: &quot;3.5&quot;, &quot;4&quot;
&lt;br /&gt;
&lt;br /&gt;
 If set to 0, wait forever, never timing out. Makes sense with specified &lt;code&gt;parallel&lt;/code&gt; different from &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>perCoreThreadCount</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that threadCount, threadCountSuites, threadCountClasses, threadCountMethods are per cpu core.</description>
        </parameter>
        <parameter>
          <name>pluginArtifactMap</name>
          <type>java.util.Map&lt;java.lang.String, org.apache.maven.artifact.Artifact&gt;</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of plugin artifacts.</description>
        </parameter>
        <parameter>
          <name>pluginDescriptor</name>
          <type>org.apache.maven.plugin.descriptor.PluginDescriptor</type>
          <since>2.12</since>
          <required>true</required>
          <editable>false</editable>
          <description>Information about this plugin, mainly used to lookup this plugin&apos;s configuration from the currently executing project.</description>
        </parameter>
        <parameter>
          <name>printSummary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to print summary of test suites or just print the test cases that have errors.</description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description>The Maven Project Object.</description>
        </parameter>
        <parameter>
          <name>projectArtifactMap</name>
          <type>java.util.Map&lt;java.lang.String, org.apache.maven.artifact.Artifact&gt;</type>
          <required>true</required>
          <editable>false</editable>
          <description>Map of project artifacts.</description>
        </parameter>
        <parameter>
          <name>projectBuildDirectory</name>
          <type>java.io.File</type>
          <since>2.20</since>
          <required>true</required>
          <editable>false</editable>
          <description>Read-only parameter with value of Maven property &lt;i&gt;project.build.directory&lt;/i&gt;.</description>
        </parameter>
        <parameter>
          <name>promoteUserPropertiesToSystemProperties</name>
          <type>boolean</type>
          <since>3.4.0</since>
          <required>false</required>
          <editable>true</editable>
          <description>If set to &lt;code&gt;true&lt;/code&gt; will also pass all user properties exposed via &lt;code&gt;MavenSession#getUserProperties()&lt;/code&gt;&lt;!-- this link could not be resolved --&gt; as system properties to a provider. Those always take precedence over same named system properties set via any other means.&lt;br /&gt;&lt;strong&gt;See also:&lt;/strong&gt; systemPropertyVariables&lt;!-- no javadoc sites associated --&gt;</description>
        </parameter>
        <parameter>
          <name>properties</name>
          <type>java.util.Properties</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of properties for configuring the testing provider. This is the preferred method of configuring TestNG and JUnit platform providers.
&lt;br /&gt;
&lt;br /&gt;
 JUnit platform properties may be defined in a &lt;code&gt;configurationParameters&lt;/code&gt; element: 
&lt;pre&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;configurationParameters&amp;gt;
        junit.jupiter.execution.parallel.enabled = true
        junit.jupiter.execution.parallel.mode.default = concurrent
    &amp;lt;/configurationParameters&amp;gt;
&amp;lt;/properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
 TestNG properties may be defined as distinct element blocks: 
&lt;pre&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;property&amp;gt;
        &amp;lt;name&amp;gt;parallel&amp;lt;/name&amp;gt;
        &amp;lt;value&amp;gt;methods&amp;lt;/value&amp;gt;
    &amp;lt;/property&amp;gt;
&amp;lt;/properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>redirectTestOutputToFile</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to redirect the unit test standard output to a file (found in reportsDirectory/testName-output.txt).</description>
        </parameter>
        <parameter>
          <name>reportDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>reportFormat</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Selects the formatting for the test report to be generated. Can be set as &quot;brief&quot; or &quot;plain&quot;. Only applies to the output format of the output files (target/surefire-reports/testName.txt)</description>
        </parameter>
        <parameter>
          <name>reportNameSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add custom text into report filename: TEST-testClassName-reportNameSuffix.xml, testClassName-reportNameSuffix.txt and testClassName-reportNameSuffix-output.txt. File TEST-testClassName-reportNameSuffix.xml has changed attributes &apos;testsuite&apos;--&apos;name&apos; and &apos;testcase&apos;--&apos;classname&apos; - reportNameSuffix is added to the attribute value.</description>
        </parameter>
        <parameter>
          <name>reportsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Base directory where all reports are written to.</description>
        </parameter>
        <parameter>
          <name>rerunFailingTestsCount</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4+ providers and JUnit 5+ providers since 3.0.0-M4) The number of times each failing test will be rerun. If set larger than 0, rerun failing tests immediately after they fail. If a failing test passes in any of those reruns, it will be marked as pass and reported as a &quot;flake&quot;. However, all the failing attempts will be recorded.</description>
        </parameter>
        <parameter>
          <name>reuseForks</name>
          <type>boolean</type>
          <since>2.13</since>
          <required>false</required>
          <editable>true</editable>
          <description>Indicates if forked VMs can be reused. If set to &quot;false&quot;, a new VM is forked for each test class to be executed. If set to &quot;true&quot;, up to &lt;code&gt;forkCount&lt;/code&gt; VMs will be forked and then reused to execute all tests.</description>
        </parameter>
        <parameter>
          <name>runOrder</name>
          <type>java.lang.String</type>
          <since>2.7</since>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the order the tests will be run in. Supported values are &lt;code&gt;alphabetical&lt;/code&gt;, &lt;code&gt;reversealphabetical&lt;/code&gt;, &lt;code&gt;random&lt;/code&gt;, &lt;code&gt;hourly&lt;/code&gt; (alphabetical on even hours, reverse alphabetical on odd hours), &lt;code&gt;failedfirst&lt;/code&gt;, &lt;code&gt;balanced&lt;/code&gt; and &lt;code&gt;filesystem&lt;/code&gt;. 
&lt;br /&gt;
&lt;br /&gt;
 Odd/Even for hourly is determined at the time the of scanning the classpath, meaning it could change during a multi-module build. 
&lt;br /&gt;
&lt;br /&gt;
 Failed first will run tests that failed on previous run first, as well as new tests for this run. 
&lt;br /&gt;
&lt;br /&gt;
 Balanced is only relevant with parallel=classes, and will try to optimize the run-order of the tests reducing the overall execution time. Initially a statistics file is created and every next test run will reorder classes. 
&lt;br /&gt;
&lt;br /&gt;
 Note that the statistics are stored in a file named &lt;b&gt;.surefire-XXXXXXXXX&lt;/b&gt; beside &lt;i&gt;pom.xml&lt;/i&gt; and should not be checked into version control. The &quot;XXXXX&quot; is the SHA1 checksum of the entire surefire configuration, so different configurations will have different statistics files, meaning if you change any configuration settings you will re-run once before new statistics data can be established.</description>
        </parameter>
        <parameter>
          <name>runOrderRandomSeed</name>
          <type>java.lang.Long</type>
          <since>3.0.0-M6</since>
          <required>false</required>
          <editable>true</editable>
          <description>Sets the random seed that will be used to order the tests if &lt;code&gt;surefire.runOrder&lt;/code&gt; is set to &lt;code&gt;random&lt;/code&gt;. 
&lt;br /&gt;
&lt;br /&gt;
 If no seeds are set and &lt;code&gt;surefire.runOrder&lt;/code&gt; is set to &lt;code&gt;random&lt;/code&gt;, then the seed used will be outputted (search for &quot;To reproduce ordering use flag -Dsurefire.runOrder.random.seed&quot;). 
&lt;br /&gt;
&lt;br /&gt;
 To deterministically reproduce any random test order that was run before, simply set the seed to be the same value.</description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description>The current build session instance.</description>
        </parameter>
        <parameter>
          <name>shutdown</name>
          <type>java.lang.String</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>After the plugin process is shutdown by sending &lt;i&gt;SIGTERM signal (CTRL+C)&lt;/i&gt;, &lt;i&gt;SHUTDOWN command&lt;/i&gt; is received by every forked JVM. 
&lt;br /&gt;
 The value is set to (&lt;code&gt;shutdown=exit&lt;/code&gt;) by default (changed in version 3.0.0-M4). 
&lt;br /&gt;
 The parameter can be configured with other two values &lt;code&gt;testset&lt;/code&gt; and &lt;code&gt;kill&lt;/code&gt;. 
&lt;br /&gt;
 With(&lt;code&gt;shutdown=testset&lt;/code&gt;) the test set may still continue to run in forked JVM. 
&lt;br /&gt;
 Using &lt;code&gt;exit&lt;/code&gt; forked JVM executes &lt;code&gt;System.exit(1)&lt;/code&gt; after the plugin process has received &lt;i&gt;SIGTERM signal&lt;/i&gt;. 
&lt;br /&gt;
 Using &lt;code&gt;kill&lt;/code&gt; the JVM executes &lt;code&gt;Runtime.halt(1)&lt;/code&gt; and kills itself.</description>
        </parameter>
        <parameter>
          <name>skip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to bypass unit tests entirely. Its use is NOT RECOMMENDED, especially if you enable it using the &quot;maven.test.skip&quot; property, because maven.test.skip disables both running the tests and compiling the tests. Consider using the &lt;code&gt;skipTests&lt;/code&gt; parameter instead.</description>
        </parameter>
        <parameter>
          <name>skipAfterFailureCount</name>
          <type>int</type>
          <since>2.19</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set to error/failure count in order to skip remaining tests. Due to race conditions in parallel/forked execution this may not be fully guaranteed.
&lt;br /&gt;
 Enable with system property &lt;code&gt;-Dsurefire.skipAfterFailureCount=1&lt;/code&gt; or any number greater than zero. Defaults to &quot;0&quot;.
&lt;br /&gt;
 See the prerequisites and limitations in documentation:
&lt;br /&gt;&lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&quot;&gt; http://maven.apache.org/plugins/maven-surefire-plugin/examples/skip-after-failure.html&lt;/a&gt;</description>
        </parameter>
        <parameter>
          <name>skipExec</name>
          <type>boolean</type>
          <since>2.3</since>
          <deprecated>Use skipTests instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>This old parameter is just like &lt;code&gt;skipTests&lt;/code&gt;, but bound to the old property &quot;maven.test.skip.exec&quot;.</description>
        </parameter>
        <parameter>
          <name>skipTests</name>
          <type>boolean</type>
          <since>2.4</since>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to skip running tests, but still compile them. Its use is NOT RECOMMENDED, but quite convenient on occasion.
&lt;br /&gt;
 Failsafe plugin deprecated the parameter &lt;code&gt;skipTests&lt;/code&gt; and the parameter will be removed in &lt;i&gt;Failsafe 3.0.0&lt;/i&gt; as it is a source of conflicts between Failsafe and Surefire plugin.</description>
        </parameter>
        <parameter>
          <name>statelessTestsetInfoReporter</name>
          <type>org.apache.maven.plugin.surefire.extensions.SurefireStatelessTestsetInfoReporter</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>statelessTestsetReporter</name>
          <type>org.apache.maven.plugin.surefire.extensions.SurefireStatelessReporter</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>suiteXmlFiles</name>
          <type>java.io.File[]</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG) List of &amp;lt;suiteXmlFile&amp;gt; elements specifying TestNG suite xml file locations. Note that &lt;code&gt;suiteXmlFiles&lt;/code&gt; is incompatible with several other parameters of this plugin, like &lt;code&gt;includes&lt;/code&gt; and &lt;code&gt;excludes&lt;/code&gt;.
&lt;br /&gt;
 This parameter is ignored if the &lt;code&gt;test&lt;/code&gt; parameter is specified (allowing you to run a single test instead of an entire suite).</description>
        </parameter>
        <parameter>
          <name>systemProperties</name>
          <type>java.util.Properties</type>
          <deprecated>Use &lt;code&gt;systemPropertyVariables&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; instead.</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to a provider.&lt;br /&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;code&gt;systemPropertyVariables&lt;/code&gt; for how the effective provider properties are calculated&lt;!-- no javadoc sites associated --&gt;</description>
        </parameter>
        <parameter>
          <name>systemPropertiesFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Properties file being used as system properties passed to the provider.&lt;br /&gt;&lt;strong&gt;See also:&lt;/strong&gt; &lt;code&gt;systemPropertyVariables&lt;/code&gt; for how the effective provider properties are calculated&lt;!-- no javadoc sites associated --&gt;</description>
        </parameter>
        <parameter>
          <name>systemPropertyVariables</name>
          <type>java.util.Map&lt;java.lang.String, java.lang.String&gt;</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>List of System properties to pass to a provider. The effective system properties given to a provider are contributed from several sources: 
&lt;ol&gt;
 &lt;li&gt;properties set via &lt;code&gt;argLine&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; with &lt;code&gt;-D&lt;/code&gt; (only for forked executions)&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;systemProperties&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;getSystemPropertiesFile()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; (set via parameter &lt;code&gt;systemPropertiesFile&lt;/code&gt; on some goals)&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;systemPropertyVariables&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt;&lt;/li&gt;
 &lt;li&gt;User properties from &lt;code&gt;MavenSession#getUserProperties()&lt;/code&gt;&lt;!-- this link could not be resolved --&gt;, usually set via CLI options given with &lt;code&gt;-D&lt;/code&gt; on the current Maven process (only used as source if &lt;code&gt;promoteUserPropertiesToSystemProperties&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; is &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt;
&lt;/ol&gt; Later sources may overwrite same named properties from earlier sources, that means for example that one cannot overwrite user properties with either &lt;code&gt;systemProperties&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt;, &lt;code&gt;getSystemPropertiesFile()&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; or &lt;code&gt;systemPropertyVariables&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt;. 
&lt;p&gt;Certain properties may only be overwritten via &lt;code&gt;argLine&lt;/code&gt;&lt;!-- no javadoc sites associated --&gt; (applicable only for forked executions) because their values are cached and only evaluated at the start of the JRE. Those include:&lt;/p&gt;
&lt;ul&gt;
 &lt;li&gt;&lt;code&gt;java.library.path&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;file.encoding&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;jdk.map.althashing.threshold&lt;/code&gt;&lt;/li&gt;
 &lt;li&gt;&lt;code&gt;line.separator&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;br /&gt;&lt;strong&gt;See also:&lt;/strong&gt; systemProperties&lt;!-- no javadoc sites associated --&gt;</description>
        </parameter>
        <parameter>
          <name>tempDir</name>
          <type>java.lang.String</type>
          <since>2.20</since>
          <required>false</required>
          <editable>true</editable>
          <description>Relative path to &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory containing internal Surefire temporary files. 
&lt;br /&gt;
 The &lt;i&gt;temporary-surefire-boot&lt;/i&gt; directory is &lt;i&gt;project.build.directory&lt;/i&gt; on most platforms or &lt;i&gt;system default temporary-directory&lt;/i&gt; specified by the system property &lt;code&gt;java.io.tmpdir&lt;/code&gt; on Windows (see &lt;a href=&quot;https://issues.apache.org/jira/browse/SUREFIRE-1400&quot;&gt;SUREFIRE-1400&lt;/a&gt;). 
&lt;br /&gt;
 It is deleted after the test set has completed.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify this parameter to run individual tests by file name, overriding the parameter &lt;code&gt;includes&lt;/code&gt; and &lt;code&gt;excludes&lt;/code&gt;. Each pattern you specify here will be used to create an include pattern formatted like &lt;code&gt;**/${test}.java&lt;/code&gt;, so you can just type &lt;code&gt;-Dtest=MyTest&lt;/code&gt; to run a single test called &quot;foo/MyTest.java&quot;. The test patterns prefixed with a &lt;em&gt;!&lt;/em&gt; will be excluded. 
&lt;br /&gt;
 This parameter overrides the parameter &lt;code&gt;includes&lt;/code&gt;, &lt;code&gt;excludes&lt;/code&gt;, and the TestNG parameter &lt;code&gt;suiteXmlFiles&lt;/code&gt;. 
&lt;br /&gt;
 Since 2.7.3, you can execute a limited number of methods in the test by adding &lt;i&gt;#myMethod&lt;/i&gt; or &lt;i&gt;#my*ethod&lt;/i&gt;. For example, &lt;code&gt;-Dtest=MyTest#myMethod&lt;/code&gt;. This is supported for junit 4.x and TestNg.
&lt;br /&gt;
&lt;br /&gt;
 Since 2.19 a complex syntax is supported in one parameter (JUnit 4, JUnit 4.7+, TestNG): 
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=???Test, !Unstable*, pkg/**/Ci*leTest.java, *Test#test*One+testTwo?????, #fast*+slowTest&quot;&lt;/code&gt;&lt;/pre&gt; or e.g. 
&lt;pre&gt;&lt;code&gt;&quot;-Dtest=Basic*, !%regex[.*.Unstable.*], !%regex[.*.MyTest.class#one.*|two.*], %regex[#fast.*|slow.*]&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;br /&gt;
 The Parameterized JUnit runner &lt;code&gt;describes&lt;/code&gt; test methods using an index in brackets, so the non-regex method pattern would become: &lt;code&gt;#testMethod[*]&lt;/code&gt;. If using &lt;code&gt;@Parameters(name=&quot;{index}: fib({0})={1}&quot;)&lt;/code&gt; and selecting the index e.g. 5 in pattern, the non-regex method pattern would become &lt;code&gt;#testMethod[5:*]&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testClassesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing generated test classes of the project being tested. This will be included at the beginning of the test classpath.</description>
        </parameter>
        <parameter>
          <name>testFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Set this to &quot;true&quot; to ignore a failure during testing. Its use is NOT RECOMMENDED, but quite convenient on occasion.</description>
        </parameter>
        <parameter>
          <name>testNGArtifactName</name>
          <type>java.lang.String</type>
          <since>2.3.1</since>
          <required>false</required>
          <editable>true</editable>
          <description>Allows you to specify the name of the TestNG artifact. If not set, &lt;code&gt;org.testng:testng&lt;/code&gt; will be used.</description>
        </parameter>
        <parameter>
          <name>testSourceDirectory</name>
          <type>java.io.File</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>The test source directory containing test class sources. Important &lt;b&gt;only&lt;/b&gt; for TestNG HTML reports.</description>
        </parameter>
        <parameter>
          <name>threadCount</name>
          <type>int</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>(TestNG/JUnit 4.7 provider) The attribute thread-count allows you to specify how many threads should be allocated for this execution. Only makes sense to use in conjunction with the &lt;code&gt;parallel&lt;/code&gt; parameter.</description>
        </parameter>
        <parameter>
          <name>threadCountClasses</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test classes, i.e.: 
&lt;ul&gt;
 &lt;li&gt;number of concurrent classes if &lt;code&gt;threadCount&lt;/code&gt; is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited classes concurrency if &lt;code&gt;useUnlimitedThreads&lt;/code&gt; is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if &lt;code&gt;threadCount&lt;/code&gt; and certain thread-count parameters are &amp;gt; 0 for &lt;code&gt;parallel&lt;/code&gt;, the concurrency is computed from ratio. For instance &lt;code&gt;parallel=all&lt;/code&gt; and the ratio between &lt;code&gt;threadCountSuites&lt;/code&gt;:&lt;code&gt;threadCountClasses&lt;/code&gt;:&lt;code&gt;threadCountMethods&lt;/code&gt; is 2:&lt;b&gt;3&lt;/b&gt;:5, there is 30% of &lt;code&gt;threadCount&lt;/code&gt; in concurrent classes.&lt;/li&gt;
 &lt;li&gt;as in the previous case but without this leaf thread-count. Example: &lt;code&gt;parallel=suitesAndClasses&lt;/code&gt;, &lt;code&gt;threadCount=16&lt;/code&gt;, &lt;code&gt;threadCountSuites=5&lt;/code&gt;, &lt;code&gt;threadCountClasses&lt;/code&gt; is unspecified leaf, the number of concurrent classes is varying from &amp;gt;= 11 to 14 or 15. The &lt;code&gt;threadCountSuites&lt;/code&gt; become given number of threads.&lt;/li&gt;
&lt;/ul&gt; Only makes sense to use in conjunction with the &lt;code&gt;parallel&lt;/code&gt; parameter. The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountMethods</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test methods, i.e.: 
&lt;ul&gt;
 &lt;li&gt;number of concurrent methods if &lt;code&gt;threadCount&lt;/code&gt; is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited concurrency of methods if &lt;code&gt;useUnlimitedThreads&lt;/code&gt; is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if &lt;code&gt;threadCount&lt;/code&gt; and certain thread-count parameters are &amp;gt; 0 for &lt;code&gt;parallel&lt;/code&gt;, the concurrency is computed from ratio. For instance parallel=all and the ratio between &lt;code&gt;threadCountSuites&lt;/code&gt;:&lt;code&gt;threadCountClasses&lt;/code&gt;:&lt;code&gt;threadCountMethods&lt;/code&gt; is 2:3:&lt;b&gt;5&lt;/b&gt;, there is 50% of &lt;code&gt;threadCount&lt;/code&gt; which appears in concurrent methods.&lt;/li&gt;
 &lt;li&gt;as in the previous case but without this leaf thread-count. Example: &lt;code&gt;parallel=all&lt;/code&gt;, &lt;code&gt;threadCount=16&lt;/code&gt;, &lt;code&gt;threadCountSuites=2&lt;/code&gt;, &lt;code&gt;threadCountClasses=3&lt;/code&gt;, but &lt;code&gt;threadCountMethods&lt;/code&gt; is unspecified leaf, the number of concurrent methods is varying from &amp;gt;= 11 to 14 or 15. The &lt;code&gt;threadCountSuites&lt;/code&gt; and &lt;code&gt;threadCountClasses&lt;/code&gt; become given number of threads.&lt;/li&gt;
&lt;/ul&gt; Only makes sense to use in conjunction with the &lt;code&gt;parallel&lt;/code&gt; parameter. The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>threadCountSuites</name>
          <type>int</type>
          <since>2.16</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) This attribute allows you to specify the concurrency in test suites, i.e.: 
&lt;ul&gt;
 &lt;li&gt;number of concurrent suites if &lt;code&gt;threadCount&lt;/code&gt; is 0 or unspecified&lt;/li&gt;
 &lt;li&gt;limited suites concurrency if &lt;code&gt;useUnlimitedThreads&lt;/code&gt; is set to &lt;strong&gt;true&lt;/strong&gt;&lt;/li&gt;
 &lt;li&gt;if &lt;code&gt;threadCount&lt;/code&gt; and certain thread-count parameters are &amp;gt; 0 for &lt;code&gt;parallel&lt;/code&gt;, the concurrency is computed from ratio. For instance &lt;code&gt;parallel=all&lt;/code&gt; and the ratio between &lt;code&gt;threadCountSuites&lt;/code&gt;:&lt;code&gt;threadCountClasses&lt;/code&gt;:&lt;code&gt;threadCountMethods&lt;/code&gt; is &lt;b&gt;2&lt;/b&gt;:3:5, there is 20% of &lt;code&gt;threadCount&lt;/code&gt; which appeared in concurrent suites.&lt;/li&gt;
&lt;/ul&gt; Only makes sense to use in conjunction with the &lt;code&gt;parallel&lt;/code&gt; parameter. The default value &lt;b&gt;0&lt;/b&gt; behaves same as unspecified one.</description>
        </parameter>
        <parameter>
          <name>trimStackTrace</name>
          <type>boolean</type>
          <since>2.2</since>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to trim the stack trace in the reports to just the lines within the test, or show the full trace.</description>
        </parameter>
        <parameter>
          <name>useFile</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Option to generate a file test report or just output the test report to the console.</description>
        </parameter>
        <parameter>
          <name>useManifestOnlyJar</name>
          <type>boolean</type>
          <since>2.4.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>By default, Surefire forks your tests using a manifest-only JAR; set this parameter to &quot;false&quot; to force it to launch your tests with a plain old Java classpath. (See the &lt;a href=&quot;http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&quot;&gt; http://maven.apache.org/plugins/maven-surefire-plugin/examples/class-loading.html&lt;/a&gt; for a more detailed explanation of manifest-only JARs and their benefits.) 
&lt;br /&gt;
 Beware, setting this to &quot;false&quot; may cause your tests to fail on Windows if your classpath is too long.</description>
        </parameter>
        <parameter>
          <name>useModulePath</name>
          <type>boolean</type>
          <since>3.0.0-M2</since>
          <required>false</required>
          <editable>true</editable>
          <description>When &lt;code&gt;true&lt;/code&gt;, uses the modulepath when executing with JDK 9+ and &lt;i&gt;module-info.java&lt;/i&gt; is present. When &lt;code&gt;false&lt;/code&gt;, always uses the classpath. 
&lt;br /&gt;
 Defaults to &lt;code&gt;true&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>useSystemClassLoader</name>
          <type>boolean</type>
          <since>2.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Option to pass dependencies to the system&apos;s classloader instead of using an isolated class loader when forking. Prevents problems with JDKs which implement the service provider lookup mechanism by using the system&apos;s ClassLoader.</description>
        </parameter>
        <parameter>
          <name>useUnlimitedThreads</name>
          <type>boolean</type>
          <since>2.5</since>
          <required>false</required>
          <editable>true</editable>
          <description>(JUnit 4.7 provider) Indicates that the thread pool will be unlimited. The &lt;code&gt;parallel&lt;/code&gt; parameter and the actual number of classes/methods will decide. Setting this to &quot;true&quot; effectively disables &lt;code&gt;perCoreThreadCount&lt;/code&gt; and &lt;code&gt;threadCount&lt;/code&gt;. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>workingDirectory</name>
          <type>java.io.File</type>
          <since>2.1.3</since>
          <required>false</required>
          <editable>true</editable>
          <description>Command line working directory.</description>
        </parameter>
      </parameters>
      <configuration>
        <additionalClasspathDependencies implementation="java.util.List">${maven.test.additionalClasspathDependencies}</additionalClasspathDependencies>
        <additionalClasspathElements implementation="java.lang.String[]">${maven.test.additionalClasspath}</additionalClasspathElements>
        <agentDirectory implementation="java.io.File" default-value="${project.build.directory}/vmlens-agent"/>
        <argLine implementation="java.lang.String">${argLine}</argLine>
        <basedir implementation="java.io.File" default-value="${basedir}"/>
        <childDelegation implementation="boolean" default-value="false">${childDelegation}</childDelegation>
        <classesDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <classpathDependencyExcludes implementation="java.lang.String[]">${maven.test.dependency.excludes}</classpathDependencyExcludes>
        <debugForkedProcess implementation="java.lang.String">${maven.surefire.debug}</debugForkedProcess>
        <dependenciesToScan implementation="java.lang.String[]">${dependenciesToScan}</dependenciesToScan>
        <disableXmlReport implementation="java.lang.Boolean">${disableXmlReport}</disableXmlReport>
        <enableAssertions implementation="boolean" default-value="true">${enableAssertions}</enableAssertions>
        <enableOutErrElements implementation="boolean" default-value="true">${enableOutErrElements}</enableOutErrElements>
        <enableProcessChecker implementation="java.lang.String">${surefire.enableProcessChecker}</enableProcessChecker>
        <enablePropertiesElement implementation="boolean" default-value="true">${enablePropertiesElement}</enablePropertiesElement>
        <encoding implementation="java.lang.String" default-value="${project.reporting.outputEncoding}">${surefire.encoding}</encoding>
        <eventDirectory implementation="java.io.File" default-value="${project.build.directory}/vmlens-agent/vmlens"/>
        <excludeJUnit5Engines implementation="java.lang.String[]">${surefire.excludeJUnit5Engines}</excludeJUnit5Engines>
        <excludedEnvironmentVariables implementation="java.lang.String[]">${surefire.excludedEnvironmentVariables}</excludedEnvironmentVariables>
        <excludedGroups implementation="java.lang.String">${excludedGroups}</excludedGroups>
        <excludes implementation="java.util.List">${surefire.excludes}</excludes>
        <excludesFile implementation="java.io.File">${surefire.excludesFile}</excludesFile>
        <failIfNoSpecifiedTests implementation="boolean" default-value="true">${surefire.failIfNoSpecifiedTests}</failIfNoSpecifiedTests>
        <failIfNoTests implementation="boolean" default-value="false">${failIfNoTests}</failIfNoTests>
        <failOnFlakeCount implementation="int" default-value="0">${surefire.failOnFlakeCount}</failOnFlakeCount>
        <forkCount implementation="java.lang.String" default-value="1">${forkCount}</forkCount>
        <forkNode implementation="org.apache.maven.surefire.extensions.ForkNodeFactory">${surefire.forkNode}</forkNode>
        <forkedProcessExitTimeoutInSeconds implementation="int" default-value="30">${surefire.exitTimeout}</forkedProcessExitTimeoutInSeconds>
        <forkedProcessTimeoutInSeconds implementation="int">${surefire.timeout}</forkedProcessTimeoutInSeconds>
        <groups implementation="java.lang.String">${groups}</groups>
        <includeJUnit5Engines implementation="java.lang.String[]">${surefire.includeJUnit5Engines}</includeJUnit5Engines>
        <includes implementation="java.util.List">${surefire.includes}</includes>
        <includesFile implementation="java.io.File">${surefire.includesFile}</includesFile>
        <junitArtifactName implementation="java.lang.String" default-value="junit:junit">${junitArtifactName}</junitArtifactName>
        <jvm implementation="java.lang.String">${jvm}</jvm>
        <objectFactory implementation="java.lang.String">${objectFactory}</objectFactory>
        <parallel implementation="java.lang.String">${parallel}</parallel>
        <parallelMavenExecution implementation="java.lang.Boolean" default-value="${session.parallel}"/>
        <parallelOptimized implementation="boolean" default-value="true">${parallelOptimized}</parallelOptimized>
        <parallelTestsTimeoutForcedInSeconds implementation="double">${surefire.parallel.forcedTimeout}</parallelTestsTimeoutForcedInSeconds>
        <parallelTestsTimeoutInSeconds implementation="double">${surefire.parallel.timeout}</parallelTestsTimeoutInSeconds>
        <perCoreThreadCount implementation="boolean" default-value="true">${perCoreThreadCount}</perCoreThreadCount>
        <pluginArtifactMap implementation="java.util.Map">${plugin.artifactMap}</pluginArtifactMap>
        <pluginDescriptor implementation="org.apache.maven.plugin.descriptor.PluginDescriptor" default-value="${plugin}"/>
        <printSummary implementation="boolean" default-value="true">${surefire.printSummary}</printSummary>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <projectArtifactMap implementation="java.util.Map">${project.artifactMap}</projectArtifactMap>
        <projectBuildDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <promoteUserPropertiesToSystemProperties implementation="boolean" default-value="true"/>
        <redirectTestOutputToFile implementation="boolean" default-value="false">${maven.test.redirectTestOutputToFile}</redirectTestOutputToFile>
        <reportDirectory implementation="java.io.File" default-value="${project.build.directory}/vmlens-report"/>
        <reportFormat implementation="java.lang.String" default-value="brief">${surefire.reportFormat}</reportFormat>
        <reportNameSuffix implementation="java.lang.String" default-value="">${surefire.reportNameSuffix}</reportNameSuffix>
        <reportsDirectory implementation="java.io.File" default-value="${project.build.directory}/surefire-reports"/>
        <rerunFailingTestsCount implementation="int" default-value="0">${surefire.rerunFailingTestsCount}</rerunFailingTestsCount>
        <reuseForks implementation="boolean" default-value="true">${reuseForks}</reuseForks>
        <runOrder implementation="java.lang.String" default-value="filesystem">${surefire.runOrder}</runOrder>
        <runOrderRandomSeed implementation="java.lang.Long">${surefire.runOrder.random.seed}</runOrderRandomSeed>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
        <shutdown implementation="java.lang.String" default-value="exit">${surefire.shutdown}</shutdown>
        <skip implementation="boolean" default-value="false">${maven.test.skip}</skip>
        <skipAfterFailureCount implementation="int" default-value="0">${surefire.skipAfterFailureCount}</skipAfterFailureCount>
        <skipExec implementation="boolean">${maven.test.skip.exec}</skipExec>
        <skipTests implementation="boolean" default-value="false">${skipTests}</skipTests>
        <suiteXmlFiles implementation="java.io.File[]">${surefire.suiteXmlFiles}</suiteXmlFiles>
        <systemPropertiesFile implementation="java.io.File">${surefire.systemPropertiesFile}</systemPropertiesFile>
        <tempDir implementation="java.lang.String" default-value="surefire">${tempDir}</tempDir>
        <test implementation="java.lang.String">${test}</test>
        <testClassesDirectory implementation="java.io.File" default-value="${project.build.testOutputDirectory}"/>
        <testFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</testFailureIgnore>
        <testNGArtifactName implementation="java.lang.String" default-value="org.testng:testng">${testNGArtifactName}</testNGArtifactName>
        <testSourceDirectory implementation="java.io.File" default-value="${project.build.testSourceDirectory}"/>
        <threadCount implementation="int">${threadCount}</threadCount>
        <threadCountClasses implementation="int" default-value="0">${threadCountClasses}</threadCountClasses>
        <threadCountMethods implementation="int" default-value="0">${threadCountMethods}</threadCountMethods>
        <threadCountSuites implementation="int" default-value="0">${threadCountSuites}</threadCountSuites>
        <trimStackTrace implementation="boolean" default-value="false">${trimStackTrace}</trimStackTrace>
        <useFile implementation="boolean" default-value="true">${surefire.useFile}</useFile>
        <useManifestOnlyJar implementation="boolean" default-value="true">${surefire.useManifestOnlyJar}</useManifestOnlyJar>
        <useModulePath implementation="boolean" default-value="true">${surefire.useModulePath}</useModulePath>
        <useSystemClassLoader implementation="boolean" default-value="true">${surefire.useSystemClassLoader}</useSystemClassLoader>
        <useUnlimitedThreads implementation="boolean" default-value="false">${useUnlimitedThreads}</useUnlimitedThreads>
        <workingDirectory implementation="java.io.File">${basedir}</workingDirectory>
      </configuration>
      <requirements>
        <requirement>
          <role>org.codehaus.plexus.languages.java.jpms.LocationManager</role>
          <field-name>locationManager</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.surefire.providerapi.ProviderDetector</role>
          <field-name>providerDetector</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.plugin.surefire.SurefireDependencyResolver</role>
          <field-name>surefireDependencyResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.toolchain.ToolchainManager</role>
          <field-name>toolchainManager</field-name>
        </requirement>
      </requirements>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-api</artifactId>
      <type>jar</type>
      <version>1.9.18</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.resolver</groupId>
      <artifactId>maven-resolver-util</artifactId>
      <type>jar</type>
      <version>1.9.18</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <type>jar</type>
      <version>24.1-jre</version>
    </dependency>
    <dependency>
      <groupId>org.checkerframework</groupId>
      <artifactId>checker-compat-qual</artifactId>
      <type>jar</type>
      <version>2.0.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.mojo</groupId>
      <artifactId>animal-sniffer-annotations</artifactId>
      <type>jar</type>
      <version>1.14</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <type>jar</type>
      <version>3.17.0</version>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
      <type>jar</type>
      <version>1.7.25</version>
    </dependency>
    <dependency>
      <groupId>com.vmlens</groupId>
      <artifactId>trace-agent-bootstrap</artifactId>
      <type>jar</type>
      <version>1.2.6-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>net.sf.trove4j</groupId>
      <artifactId>trove4j</artifactId>
      <type>jar</type>
      <version>3.0.3</version>
    </dependency>
    <dependency>
      <groupId>com.vmlens</groupId>
      <artifactId>api</artifactId>
      <type>jar</type>
      <version>1.2.6-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>com.vmlens</groupId>
      <artifactId>vmlens-maven-plugin</artifactId>
      <type>jar</type>
      <version>1.2.6-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <type>jar</type>
      <version>2.12.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-surefire-plugin</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-api</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-logger-api</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-shared-utils</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-extensions-api</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>maven-surefire-common</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-booter</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.surefire</groupId>
      <artifactId>surefire-extensions-spi</artifactId>
      <type>jar</type>
      <version>3.5.3</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-common-artifact-filters</artifactId>
      <type>jar</type>
      <version>3.4.0</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-java</artifactId>
      <type>jar</type>
      <version>1.4.0</version>
    </dependency>
    <dependency>
      <groupId>com.thoughtworks.qdox</groupId>
      <artifactId>qdox</artifactId>
      <type>jar</type>
      <version>2.2.0</version>
    </dependency>
    <dependency>
      <groupId>com.vmlens</groupId>
      <artifactId>sync-bug</artifactId>
      <type>jar</type>
      <version>1.2.6-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala3-library_3</artifactId>
      <type>jar</type>
      <version>3.3.1</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-library</artifactId>
      <type>jar</type>
      <version>2.13.10</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <type>jar</type>
      <version>9.7.1</version>
    </dependency>
    <dependency>
      <groupId>com.typesafe.scala-logging</groupId>
      <artifactId>scala-logging_2.13</artifactId>
      <type>jar</type>
      <version>3.9.3</version>
    </dependency>
    <dependency>
      <groupId>org.scala-lang</groupId>
      <artifactId>scala-reflect</artifactId>
      <type>jar</type>
      <version>2.13.4</version>
    </dependency>
    <dependency>
      <groupId>com.vmlens</groupId>
      <artifactId>report</artifactId>
      <type>jar</type>
      <version>1.2.6-SNAPSHOT</version>
    </dependency>
    <dependency>
      <groupId>com.github.spullara.mustache.java</groupId>
      <artifactId>compiler</artifactId>
      <type>jar</type>
      <version>0.9.11</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <type>jar</type>
      <version>2.13.1</version>
    </dependency>
    <dependency>
      <groupId>com.google.errorprone</groupId>
      <artifactId>error_prone_annotations</artifactId>
      <type>jar</type>
      <version>2.38.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-text</artifactId>
      <type>jar</type>
      <version>1.12.0</version>
    </dependency>
    <dependency>
      <groupId>org.hamcrest</groupId>
      <artifactId>java-hamcrest</artifactId>
      <type>jar</type>
      <version>2.0.0.0</version>
    </dependency>
  </dependencies>
</plugin>